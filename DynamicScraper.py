import time
import http.client
from http.client import IncompleteRead
from bs4 import BeautifulSoup

'''
Class to handle the scraping of a website
Originally created to scrape realestate.com.au
Guessing it could be used for other sites too
This comment is a bit of a lie, it's not really a class
Its just a function that returns a function
I'm not sure why I did it this way
I think I was trying to make it more object oriented
But I don't think it really works
Because I'm not sure how to pass the class variables
To the function that is returned
I think I need to use a decorator
But I'm not sure how to do that

!!! The comment above was generated by copilot 
did i just get made fun of by a bot
why
'''


class Scraper():

    def __init__(self, url, headers="", payload=""):
        self.url = url
        self.headers = headers
        self.payload = payload
        self.total_requests = 0
        self.failed_requests = 0

    def scrape(self, href, attempt=0):
        try:
            self.total_requests += 1
            conn = http.client.HTTPSConnection(self.url)

            print('Making request...')
            conn.request("GET", href, self.payload, self.headers)

            print('Waiting for response...')
            time.sleep(1)

            print('Reading response...')
            r = conn.getresponse()
            soup = BeautifulSoup(r, "html.parser")
            conn.close()
            return soup
        except IncompleteRead:
            conn.close()
            self.failed_requests += 1
            attempt += 1
            print(f'\n\tAttempt({attempt}) - Incomplete Read  - ({href})')
            print('\tRecursively Trying Again lol..')
            return self.scrape(href)

    def set_headers(self, headers):
        self.headers = headers

    def set_payload(self, payload):
        self.payload = payload

    def get_total_requests(self):
        return self.total_requests

    def get_failed_requests(self):
        return self.failed_requests

    def get_stats(self):
        return f'Total Requests: {self.total_requests} Failed Requests: {self.failed_requests}'
